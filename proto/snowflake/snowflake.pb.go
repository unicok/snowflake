// Code generated by protoc-gen-go.
// source: snowflake.proto
// DO NOT EDIT!

/*
Package snowflake is a generated protocol buffer package.

It is generated from these files:
	snowflake.proto

It has these top-level messages:
	Key
	Value
	NullRequest
	UUID
*/
package snowflake

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Key struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Value struct {
	Value int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NullRequest struct {
}

func (m *NullRequest) Reset()                    { *m = NullRequest{} }
func (m *NullRequest) String() string            { return proto.CompactTextString(m) }
func (*NullRequest) ProtoMessage()               {}
func (*NullRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UUID struct {
	Uuid uint64 `protobuf:"varint,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *UUID) Reset()                    { *m = UUID{} }
func (m *UUID) String() string            { return proto.CompactTextString(m) }
func (*UUID) ProtoMessage()               {}
func (*UUID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Key)(nil), "snowflake.Key")
	proto.RegisterType((*Value)(nil), "snowflake.Value")
	proto.RegisterType((*NullRequest)(nil), "snowflake.NullRequest")
	proto.RegisterType((*UUID)(nil), "snowflake.UUID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Snowflake service

type SnowflakeClient interface {
	Next(ctx context.Context, in *Key, opts ...client.CallOption) (*Value, error)
	GetUUID(ctx context.Context, in *NullRequest, opts ...client.CallOption) (*UUID, error)
}

type snowflakeClient struct {
	c           client.Client
	serviceName string
}

func NewSnowflakeClient(serviceName string, c client.Client) SnowflakeClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "snowflake"
	}
	return &snowflakeClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *snowflakeClient) Next(ctx context.Context, in *Key, opts ...client.CallOption) (*Value, error) {
	req := c.c.NewRequest(c.serviceName, "Snowflake.Next", in)
	out := new(Value)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowflakeClient) GetUUID(ctx context.Context, in *NullRequest, opts ...client.CallOption) (*UUID, error) {
	req := c.c.NewRequest(c.serviceName, "Snowflake.GetUUID", in)
	out := new(UUID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Snowflake service

type SnowflakeHandler interface {
	Next(context.Context, *Key, *Value) error
	GetUUID(context.Context, *NullRequest, *UUID) error
}

func RegisterSnowflakeHandler(s server.Server, hdlr SnowflakeHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Snowflake{hdlr}, opts...))
}

type Snowflake struct {
	SnowflakeHandler
}

func (h *Snowflake) Next(ctx context.Context, in *Key, out *Value) error {
	return h.SnowflakeHandler.Next(ctx, in, out)
}

func (h *Snowflake) GetUUID(ctx context.Context, in *NullRequest, out *UUID) error {
	return h.SnowflakeHandler.GetUUID(ctx, in, out)
}

func init() { proto.RegisterFile("snowflake.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0xce, 0xcb, 0x2f,
	0x4f, 0xcb, 0x49, 0xcc, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x49, 0x72, 0x31, 0x7b, 0xa7, 0x56, 0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0xb2, 0x5c, 0xac, 0x61, 0x89, 0x39, 0xa5, 0xa9,
	0x42, 0x22, 0x5c, 0xac, 0x65, 0x20, 0x06, 0x58, 0x96, 0x39, 0x08, 0xc2, 0x51, 0xe2, 0xe5, 0xe2,
	0xf6, 0x2b, 0xcd, 0xc9, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x92, 0xe2, 0x62, 0x09,
	0x0d, 0xf5, 0x74, 0x01, 0x99, 0x54, 0x5a, 0x9a, 0x99, 0x02, 0x56, 0xcb, 0x12, 0x04, 0x66, 0x1b,
	0x65, 0x72, 0x71, 0x06, 0xc3, 0x6c, 0x14, 0xd2, 0xe0, 0x62, 0xf1, 0x4b, 0xad, 0x28, 0x11, 0xe2,
	0xd3, 0x43, 0x38, 0xcb, 0x3b, 0xb5, 0x52, 0x4a, 0x00, 0x89, 0x0f, 0xb1, 0xd7, 0x88, 0x8b, 0xdd,
	0x3d, 0xb5, 0x04, 0x6c, 0xaa, 0x18, 0x92, 0x24, 0x92, 0xad, 0x52, 0xfc, 0x48, 0xe2, 0x20, 0x85,
	0x49, 0x6c, 0x60, 0x1f, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x68, 0xdf, 0xf5, 0xf4,
	0x00, 0x00, 0x00,
}
